# -*- coding: utf-8 -*-
"""Streamlit Netflix Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fNA5h9eETbDRImS25gDu8Q2XtBB-Fu7J
"""

import pandas as pd

# Read the CSV file
file_name = "netflix_titles.csv"
df = pd.read_csv(file_name)

# Display the first few rows
df.head()

df.info()

df.shape

df.columns

df.describe()

df.describe(include='O')

list(df.rating.unique())

rating_to_duration = {
     'TV-MA': 60,  # Example: TV-MA rating corresponds to 60 minutes
     'TV-14': 45,  # Example: TV-14 rating corresponds to 45 minutes
     'TV-PG': 30,  # Example: TV-PG rating corresponds to 30 minutes
     # Add more mappings as needed
 }

# Fixing / Cleaning Up Rating List

import pandas as pd
df = pd.read_csv('netflix_titles.csv')

# Create a new 'duration' column
df['duration'] = df['rating'].str.extract(r'(\d+) min')  # Extract duration values

# Convert 'duration' column to numeric
df['duration'] = pd.to_numeric(df['duration'], errors='coerce')

# Update 'rating' column to remove duration values
df['rating'] = df['rating'].str.replace(r'\d+ min', '', regex=True)  # Remove duration

# Clean up 'rating' column (remove leading/trailing spaces)
df['rating'] = df['rating'].str.strip()

# Your DataFrame 'df' now has separate 'rating' and 'duration' columns

list(df.rating.unique())

df.isnull().sum()

df[df.duplicated(keep='first')]

df.drop_duplicates(keep='first',inplace=True)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,6))
sns.distplot(df.release_year,color='r')
plt.title('Release Year',size=18)
plt.xlabel('Release Year',size=14)
plt.ylabel('Count',size=14)
plt.show()

plt.figure(figsize=(10,6))
sns.histplot(df.rating, color='g')
plt.title('Rating',size=18)
plt.xlabel('Rating',size=14)
plt.ylabel('Count',size=14)
plt.show()

plt.figure(figsize=(10,6))
plt.hist(df.release_year,color='y')
plt.title('Release Year',size=18)
plt.show()

df.type.value_counts()

df.date_added.value_counts()

# Create bar charts for selected features
features_to_visualize = ['type', 'rating'] # Define the features you want to visualize

for feature in features_to_visualize:
    plt.figure(figsize=(10, 6))
    sns.countplot(data=df, x=feature, order=df[feature].value_counts().index)
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Count')
    plt.xticks(rotation=90)
    plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py

import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px

st.set_page_config(
    page_title="Netflix Titles Dashboard",
    page_icon="ðŸŽ¥",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

df_reshaped = pd.read_csv('netflix_titles.csv')

with st.sidebar:
    st.title('ðŸŽ¥ Netflix Titles Dashboard')

    # Overview Metrics
    st.write(f"Total Titles: {df.shape[0]}")
    st.write(f"Movies: {df[df['type'] == 'Movie'].shape[0]}")
    st.write(f"TV Shows: {df[df['type'] == 'TV Show'].shape[0]}")

    # Chart: Titles Per Year
    st.subheader("Titles Released Per Year")
    # Calculate release year counts and reset index
    release_year_counts = df['release_year'].value_counts().sort_index().reset_index()
    # Rename columns for clarity
    release_year_counts.columns = ['Release Year', 'Number of Titles']
    # Create the bar chart with correct column names
    fig1 = px.bar(release_year_counts, x="Release Year", y="Number of Titles",
                  color="Number of Titles", color_continuous_scale="viridis")
    st.plotly_chart(fig1)

    # Data Table
    st.subheader("Data Preview")
    st.dataframe(df)

# Moved outside the 'with st.sidebar:' block
color_theme_list = ['Reds', 'OrRd', 'RdPu', 'inferno', 'magma', 'warmgrey', 'brown', 'red', 'pinkyl', 'pinkyg']
selected_color_theme = st.selectbox('Select a color theme', color_theme_list)

# Function to Create Heatmap
def make_heatmap(input_df, input_y, input_x, input_color, input_color_theme):
    heatmap = alt.Chart(input_df).mark_rect().encode(
        y=alt.Y(f'{input_y}:O', axis=alt.Axis(title="Year", titleFontSize=14, titlePadding=15, titleFontWeight=700, labelAngle=0)),
        x=alt.X(f'{input_x}:O', axis=alt.Axis(title="Type", titleFontSize=14, titlePadding=15, titleFontWeight=700)),
        color=alt.Color(f'max({input_color}):Q', legend=None, scale=alt.Scale(scheme=input_color_theme)),
        stroke=alt.value('black'),
        strokeWidth=alt.value(0.25),
    ).properties(width=800, height=400)
    return heatmap

# Process Data for Heatmap
st.subheader("Heatmap: Netflix Titles by Release Year & Type")
heatmap_data = df.groupby(["release_year", "type"]).size().reset_index(name="count")

# Color Theme Selection: Shades of Red
color_schemes = ['reds', 'inferno', 'magma', 'redpurple', 'goldred', 'orangered']
selected_color = st.selectbox("Choose a color theme:", color_schemes, index=0)

# Display Heatmap
heatmap_chart = make_heatmap(heatmap_data, "release_year", "type", "count", selected_color)
st.altair_chart(heatmap_chart, use_container_width=True)